/*
 * This code is part of Rice Comp215 and is made available for your
 * use as a student in Comp215. You are specifically forbidden from
 * posting this code online in a public fashion (e.g., on a public
 * GitHub repository) or otherwise making it, or any derivative of it,
 * available to future Comp215 students. Violations of this rule are
 * considered Honor Code violations and will result in your being
 * reported to the Honor Council, even after you've completed the
 * class, and will result in retroactive reductions to your grade. For
 * additional details, please see the Comp215 course syllabus.
 */

// This "gradle" file specifies how your program gets compiled, what libraries it uses, and a bunch of other
// useful things. DO NOT EDIT THIS FILE UNLESS WE GIVE YOU SPECIFIC INSTRUCTIONS!

// Engineering notes: this file is actually a program written in the Groovy programming language, which
// is yet another programming language that targets the Java virtual machine, with an emphasis on dynamic
// types rather than static types. In short, Groovy is somewhere in between Python and Java. There are
// a bunch of neat things going on here. Groovy makes it easy to define new commands which look like native
// commands in the programming language; you'll see these in action below. That means that Groovy makes
// it easy to define a "domain specific language" (DSL) for just about anything, which is exactly what
// Gradle does. Some of these commands are backed by Groovy code, while others are backed by Java
// code, which are all hooked in by the various "plugins".

// Gradle's Java plugin is the reason we're here at all. Gradle knows how to compile Java and run your
// unit tests. Via additional plugins, we can then add in code coverage requirements, CheckStyle requirements,
// and whatever else we want. This helps your graders verify that your projects satisfy each week's
// requirements without having to actually fire up IntelliJ. Also, if you scroll to the bottom, you'll
// see a bunch of external library specifications. All of those are managed by MavenCentral, a web service
// that takes a library name and points your computer at the relevant code to download.

// There are several other tools that do similar things to Gradle. You'll occasionally run into Ant and
// Maven, both of which use a far less pleasant XML syntax to describe things similar to what you see
// here. (Yes, Maven is both a file format and an Internet service.)

// So why is Comp215 using Gradle? We've based Comp215's coding environment (IntelliJ, Java, Gradle, etc.)
// on the "standard" Android coding environment, as encouraged by Google. It's not that we're trying to
// turn Comp215 students into Android programmers. Rather, we're riding on Google's coattails. As Google,
// JetBrains, the Gradle developers, and other companies invest significant effort in improving the
// toolchain for Android, we gain the benefit of those efforts.

// We're not going to teach anything about Groovy or Gradle in Comp215, but you're welcome to read up
// on your own. In particular, you hardly ever have to know much about the Groovy language in order to
// configure Gradle. There's a lot of help to be had on StackOverflow and elsewhere.

// More about Groovy: http://groovy-lang.org/
// More about Gradle: https://gradle.org/

buildscript {
    ext.gradeProject = "PP3"
    ext.gradePackage = "edu.rice"
    ext.gradeConfig = "config/pp3.yml"

    repositories {
        maven { url "https://maven-central.storage.googleapis.com" }
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id "net.ltgt.errorprone" version "0.7.1" // JDK9+
    id 'com.github.sherter.google-java-format' version '0.8'
    id "com.dorongold.task-tree" version "1.3.1" // useful for gradle task-graph debugging
    id "org.xbib.gradle.plugin.jflex" version "1.2.1"
}

group 'edu.rice'
version '1.0'

idea {
    project {
        jdkName = '11'
        languageLevel = JavaVersion.VERSION_11
        targetBytecodeVersion = JavaVersion.VERSION_11
    }
}

allprojects {
    // Makes the "javadoc" action run without a ton of errors and warnings.
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    
    tasks.withType(JavaCompile) {
        options.fork = true
        options.incremental = true
        options.encoding = "UTF-8"

        // the compilePolicy flag is maybe (?) necessary for ErrorProne
        // << "-XDcompilePolicy=byfile"

        options.compilerArgs << "-Xlint:all" << "-Xlint:-serial" << "-Xlint:-processing" << "-Xlint:-deprecation"

        // ErrorProne's "unused" warnings seems to trigger far too often, so we're suppressing them.
        options.errorprone.errorproneArgs << "-Xep:UnusedVariable:OFF" << "-Xep:UnusedMethod:OFF"

        sourceCompatibility = '11'
        targetCompatibility = '11'
    }
}

compileJava.dependsOn jflex

////////////////////////////////////////////////////////////////////////////////
// we want to print the date and other useful stuff every time we compile; helpful when looking at logs
import java.time.format.DateTimeFormatter
import java.time.ZoneId
import java.time.ZonedDateTime

gradle.taskGraph.whenReady {
    println "Compilation time: " +
            ZonedDateTime.now(ZoneId.of("America/Chicago"))
                    .format(DateTimeFormatter.RFC_1123_DATE_TIME)

    println "Gradle JDK: " + System.getProperty("java.version")
    println "Gradle version: $gradle.gradleVersion"
}

////////////////////////////////////////////////////////////////////////////////
// These are gradle actions that lets us launch a JVM for our various different "main" methods.
// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/JavaExec.html

// Note that these actions, when run from the command-line, they all seem to do the right thing, and you can kill
// off your server by typing Control-C. If you run them from IntelliJ, you'll have to hit the red stop-button.

// Launching a Java command with all the right classpath and library arguments is a pain, so it's nice that Gradle
// will do all the work for us. Also, by saying that these tasks "depend on the classes", that means that Gradle
// will make sure to recompile anything, if necessary, before going on and starting the Java program.

task runPrettyPictures (dependsOn: classes, type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "edu.rice.prettypictures.PrettyPicturesServerWeek3"

    maxHeapSize = "4g"
}

////////////////////////////////////////////////////////////////////////////////
// This section configures JaCoCo (Java Code Coverage), JUnit (unit tests), GoogleJavaFormat,
// and the autograder.

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("${buildDir}/reports/jacoco/")
    }
}

// We need to capture the errors and warnings printed by the Java compiler.
// Everything else is already written into the build directory, but not this.

task initLogFile {
    doLast {
        file("$buildDir").mkdir()
        file("$buildDir/logs").mkdir()
        def gradleBuildLog = file("$buildDir/logs/compile.log")
        gradleBuildLog.write("") // empty write forces file to exist with size 0

        def fileLogger = new StandardOutputListener() {
            void onOutput(CharSequence output) {
                gradleBuildLog << output
            }
        }

        tasks.withType(JavaCompile) {
            logger.info("compilation logging for $it")
            logging.addStandardOutputListener(fileLogger)
            logging.addStandardErrorListener(fileLogger)
        }
    }
}

compileJava.dependsOn initLogFile

test {
    useJUnitPlatform()
    outputs.upToDateWhen { false }

    minHeapSize = "512m"
    maxHeapSize = "2048m"
    jvmArgs = ["-Xss128m"]
    ignoreFailures true
}

googleJavaFormat {
    toolVersion = '1.7'
}

checkstyle {
    toolVersion = '8.23'
}

tasks.withType(Checkstyle) {
    exclude '**/FlexScanner.java' // written by JFlex; makes CheckStyle very unhappy
}

import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat
task autograderVerifyGoogleJavaFormat(type: VerifyGoogleJavaFormat) {
    source 'src/main'
    source 'src/test'
    include '**/*.java'
    ignoreFailures true
}

configurations {
    ricechecks
}

task autograder {
    dependsOn 'classes', 'jacocoTestCoverageVerification', 'jacocoTestReport',
            'autograderVerifyGoogleJavaFormat', 'checkstyleMain', 'checkstyleTest', 'test'

    doLast {
        // See: https://github.com/RiceComp215-Staff/RiceChecks/issues/5
        gradle.buildFinished { ignoredResult ->
            def result = project.javaexec {
                classpath = configurations.ricechecks
                ignoreExitValue = true
                main = "edu.rice.autograder.AutoGraderKt"
                args = [ "--project", gradeProject,
                         "--config", gradeConfig,
                         "grade" ]
            }

            if (result.getExitValue() != 0) {
                throw new GradleException("Autograder found one or more failures, see above for details")
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
// This section specifies all the external libraries being used by your Java
// program and where to find them.
repositories {
    maven { url "https://maven-central.storage.googleapis.com" }
    mavenCentral()
    mavenLocal()
}

dependencies {
    // local copy of our customized VAVR library
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // autograder annotations
    implementation 'edu.rice.ricechecks:ricechecks-annotations:0.7.3'

    // autograder tool
    ricechecks 'edu.rice.ricechecks:ricechecks:0.7.3'

    errorprone 'com.google.errorprone:error_prone_core:2.3.3'

    implementation('com.sparkjava:spark-core:2.9.1') { // web servers
        exclude module: 'slf4j-simple' // because we're using logback instead
    }
    implementation 'ch.qos.logback:logback-classic:1.2.3' // logging
    implementation 'com.j2html:j2html:1.4.0' // fluent HTML building
    implementation 'org.unbescape:unbescape:1.1.6.RELEASE' // string escapes for JSON, Java, etc.

    implementation 'com.beust:jcommander:1.72' // command-line parsing

    // annotations to help ErrorProne and IntelliJ find bugs
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.google.code.findbugs:annotations:3.0.1'
    implementation 'com.google.errorprone:error_prone_annotations:2.3.3'

    // testing libraries: these are only visible from our "test" code, not the "main" code
    testImplementation 'org.mockito:mockito-core:3.0.0' // mock testing library
    testImplementation 'org.quicktheories:quicktheories:0.26' // high-tech pattern-based testing library

    // JUnit5 support
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}
